/*
 * Copyright Consensys Software Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

plugins {
  id 'java'
  id 'java-library-distribution'
  id 'common-plugins'
  id 'de.undercouch.download'
  id 'com.google.protobuf' version '0.9.4'
}

// Define versions for gRPC and Protobuf
ext {
    grpcVersion = '1.70.0' // Align with Besu's BOM
    protobufVersion = '3.24.4' // Example: Corresponding protobuf version
    protocVersion = protobufVersion
}

group = 'net.consensys.linea.besu.plugin'

apply from: rootProject.file("gradle/java.gradle")
apply from: rootProject.file("gradle/dependency-management.gradle")
apply from: rootProject.file('gradle/common-dependencies.gradle')
apply from: rootProject.file("gradle/tests.gradle")
apply from: rootProject.file("gradle/build-aliases.gradle")
apply from: rootProject.file("gradle/lint.gradle")

dependencies {
  // annotationProcessor generates the file META-INF/services/org.hyperledger.besu.plugin.BesuPlugin
  annotationProcessor 'com.google.auto.service:auto-service'
  compileOnly 'com.google.auto.service:auto-service'

  implementation project(":native:compress")

  implementation "${besuArtifactGroup}:besu-datatypes"
  implementation "${besuArtifactGroup}:evm"
  implementation "${besuArtifactGroup}:plugin-api"
  implementation "${besuArtifactGroup}.internal:algorithms"
  implementation "${besuArtifactGroup}.internal:api"
  implementation "${besuArtifactGroup}.internal:core"
  implementation "${besuArtifactGroup}.internal:eth"
  implementation "${besuArtifactGroup}.internal:rlp"

  implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8'

  implementation 'com.github.ben-manes.caffeine:caffeine'

  implementation 'com.google.code.gson:gson'

  implementation 'io.consensys.tuweni:tuweni-bytes'
  implementation 'io.consensys.tuweni:tuweni-units'
  implementation 'io.consensys.tuweni:tuweni-toml'

  implementation 'info.picocli:picocli'

  implementation 'net.consensys.linea.zktracer:arithmetization'

  implementation 'org.hibernate.validator:hibernate-validator'

  // gRPC and Protobuf dependencies
  implementation "io.grpc:grpc-netty:${grpcVersion}"
  implementation "io.grpc:grpc-protobuf:${grpcVersion}"
  implementation "io.grpc:grpc-stub:${grpcVersion}"
  implementation "io.grpc:grpc-api:${grpcVersion}"
  implementation "com.google.protobuf:protobuf-java:${protobufVersion}"
  implementation 'javax.annotation:javax.annotation-api:1.3.2'

  testImplementation "${besuArtifactGroup}.internal:besu"
  testImplementation group: "${besuArtifactGroup}.internal", name: "core", classifier: "test-support"

  testImplementation 'org.awaitility:awaitility'
  testImplementation 'org.json:json:20231013'
  testImplementation 'org.mockito:mockito-inline:5.2.0'
  testImplementation "io.grpc:grpc-testing:${grpcVersion}"
  testImplementation "io.grpc:grpc-core:${grpcVersion}"
  testImplementation "io.grpc:grpc-inprocess:${grpcVersion}"
}

// Protobuf configuration
protobuf {
  protoc {
    artifact = "com.google.protobuf:protoc:${protocVersion}"
  }
  plugins {
    grpc {
      artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
    }
  }
  generateProtoTasks {
    all().each { task ->
      task.plugins {
        grpc {}
      }
    }
  }
}

// Add system property to disable macOS DNS resolver for Netty in tests
tasks.withType(Test) {
    systemProperty 'io.netty.resolver.dns.macos.disabled', 'true'
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true // To see System.out/err from tests
    }
    def nativeLibDir = file("src/main/rust/rln_bridge/target/release").absolutePath
    systemProperty "java.library.path", nativeLibDir
}

sourceSets {
    main {
        java {
            srcDir 'build/generated/source/proto/main/grpc'
            srcDir 'build/generated/source/proto/main/java'
        }
    }
}

apply from: rootProject.file("gradle/dist.gradle")
